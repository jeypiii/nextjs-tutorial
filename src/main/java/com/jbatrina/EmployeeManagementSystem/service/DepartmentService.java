package com.jbatrina.EmployeeManagementSystem.service;

import com.jbatrina.EmployeeManagementSystem.dao.DepartmentRepository;
import com.jbatrina.EmployeeManagementSystem.dao.EmployeeRepository;
import com.jbatrina.EmployeeManagementSystem.entity.Department;
import com.jbatrina.EmployeeManagementSystem.entity.Employee;
import com.jbatrina.EmployeeManagementSystem.exceptions.DepartmentAlreadyContainsEmployeeException;
import com.jbatrina.EmployeeManagementSystem.exceptions.DepartmentIdConflictException;
import com.jbatrina.EmployeeManagementSystem.exceptions.DepartmentNotFoundException;
import com.jbatrina.EmployeeManagementSystem.exceptions.EmployeeNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

@Service
public class DepartmentService {
    @Autowired
    private DepartmentRepository departmentRepository;
    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Department> getAllDepartments() {
        List<Department> departments = new ArrayList<>();
        departmentRepository.findAll().forEach(departments::add);

        return departments;
    }

    public Department getDepartment(int id) throws DepartmentNotFoundException {
        Optional<Department> department = departmentRepository.findById(id);
        if (!department.isPresent()) {
            throw new DepartmentNotFoundException(id).setContextMessage("Attempting to get department by Id");
        }

        return department.get();
    }

    public Department addDepartment(Department department) throws DepartmentIdConflictException {
        // NOTE: For requests the body, don't include departmentId in body since it is autogenerated
        if (departmentRepository.findById(department.getDepartmentId()).isPresent()) {
            throw new DepartmentIdConflictException(department.getDepartmentId()).setContextMessage("Attempting to add " + department);
        }

        return departmentRepository.save(department);
    }

    public void updateDepartment(int id, Department department) {
        final String additionalMessage = "Attempting to update " + department;

        Department origDepartment = departmentRepository.findById(id).orElse(null);
        if (origDepartment == null) {
            throw new DepartmentNotFoundException(department.getDepartmentId()).setContextMessage(additionalMessage);
        }
        
        if (! (department.getName() == null || department.getName().isBlank())) {
			origDepartment.setName(department.getName());
        }

        departmentRepository.save(origDepartment);
    }

    public void removeDepartment(int id) {
        if (!departmentRepository.findById(id).isPresent()) {
            throw new DepartmentNotFoundException(id).setContextMessage("Attempting to remove department ");
        }

        departmentRepository.deleteById(id);
    }
    
    
    // The methods below handle the Department-Employee relation
    /*******************************************************************/
    public void addEmployeesToDepartment(int departmentId, int[] employeeIds) {
        Department cartDepartment = getDepartment(departmentId);
        
        for (int employeeId : employeeIds) {
			// TODO: catch and collate all exceptions and send at once
        	// TODO: delay save after all employees are added
			addEmployeeToDepartment(cartDepartment, employeeId);
        }
    }

    private void addEmployeeToDepartment(Department department, int employeeId) {
        Employee employee = employeeRepository.findById(employeeId)
                .orElseThrow(() -> new EmployeeNotFoundException(employeeId)
					.setContextMessage(String.format("Attempting to add non-existent employee(ID: %d) to %s(ID: %d)", employeeId, department.getDepartmentId()))
				);

        Set<Employee> deptEmployees = department.getEmployees();
        if (deptEmployees.contains(employee)) {
        	throw new DepartmentAlreadyContainsEmployeeException(department.getDepartmentId())
        		.setContextMessage(String.format("'%s'(ID: %d) already in '%s'(ID: %d)", employee, employeeId, department.getName(), department.getDepartmentId()));
        }

        deptEmployees.add(employee);
        departmentRepository.save(department);
    }
}

