package com.jbatrina.EmployeeManagementSystem.service;

import com.jbatrina.EmployeeManagementSystem.entity.Employee;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class EmployeeService {
    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Employee> getAllEmployees() {
        List<Employee> employees = new ArrayList<>();
        employeeRepository.findAll().forEach(employees::add);

        return employees;
    }

    public Employee getEmployee(int id) throws com.jbatrina.EmployeeManagementSystem.exceptions.EmployeeNotFoundException {
        Optional<Employee> employee = employeeRepository.findById(id);
        if (!employee.isPresent()) {
            throw new com.jbatrina.EmployeeManagementSystem.exceptions.EmployeeNotFoundException(id).setContextMessage("Attempting to get employee by Id");
        }

        return employee.get();
    }

    public Employee addEmployee(Employee employee) throws com.jbatrina.EmployeeManagementSystem.exceptions.EmployeeIdConflictException {
        // NOTE: For requests the body, don't include employeeId in body since it is autogenerated
        if (employeeRepository.findById(employee.getEmployeeId()).isPresent()) {
            throw new com.jbatrina.EmployeeManagementSystem.exceptions.EmployeeIdConflictException(employee.getEmployeeId()).setContextMessage("Attempting to add " + employee);
        }

        return employeeRepository.save(employee);
    }

    public void updateEmployee(int id, Employee employee) {
        final String additionalMessage = "Attempting to update " + employee;

        if (!employeeRepository.findById(id).isPresent()) {
            throw new com.jbatrina.EmployeeManagementSystem.exceptions.EmployeeNotFoundException(employee.getEmployeeId()).setContextMessage(additionalMessage);
        }

        if (employee.getEmployeeId() != id) {
            throw new com.jbatrina.EmployeeManagementSystem.exceptions.EmployeeIdMismatchException(employee.getEmployeeId()).setContextMessage(additionalMessage);
        }

        employeeRepository.save(employee);
    }

    public void removeEmployee(int id) {
        if (!employeeRepository.findById(id).isPresent()) {
            throw new com.jbatrina.EmployeeManagementSystem.exceptions.EmployeeNotFoundException(id).setContextMessage("Attempting to remove employee ");
        }

        employeeRepository.deleteById(id);
    }
}

